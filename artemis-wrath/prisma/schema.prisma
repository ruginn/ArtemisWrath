// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id           String    @unique
  username String? @unique
  email        String?   @unique
  name         String?
  createdAt    DateTime  @default(now())
  lastPackDate DateTime?
  starterDeck  Boolean   @default(false)
  crystals Int? @default(500)
  cards PlayerCard[]
  trades Trade[] @relation("TradePoster")
  offers TradeOffer[] @relation("TradeOfferUser")
}


enum Rarity {
  Common
  Uncommon
  Rare 
  SuperRare
  Nectar
}


enum Inclination {
  Love
  Wrath
  Wisdom
  Pride
  Mischief
  Neutral
}

model Card {
  id String @unique
  name String?
  description String?
  randomNumber Int?
  image String?
  tinyImage String?
  inclination Inclination?
  inclination2 String?
  effect String?
  biome String?
  effectFunction String?
  rarity Rarity
  type String?
  attackPower Int?
  hp Int?
  cost Int?
  set Set @relation(fields: [setId], references: [id])
  setId String
}

model PlayerCard {
  id String @id @default(cuid()) @unique
  cardId String
  name String?
  description String?
  randomNumber Int?
  image String?
  tinyImage String?
  inclination Inclination?
  inclination2 String?
  effect String?
  biome String?
  effectFunction String?
  rarity Rarity
  type String?
  attackPower Int?
  hp Int?
  cost Int?
  createdAt    DateTime  @default(now())
  userId String
  user User @relation(fields: [userId], references: [id])
  trade Trade[] @relation("TradeCard")
}

model Set {
  id String @unique
  name String
  cards Card[]
}

model Trade {
  id String @id @default(cuid()) @unique
  completed Boolean @default(false)
  poster User @relation("TradePoster", fields: [userId], references: [id])
  userId String 
  playerCard PlayerCard @relation("TradeCard", fields:[cardId], references: [id])
  cardId String
  postCard String?
  // 
  wantedCard String?
  tradeUser String?
  offerCard String?
  message String?
  createdAt DateTime @default(now())
  dateCompleted DateTime?
  offered TradeOffer[]
}

model TradeOffer {
  id String @id @default(cuid()) @unique
  tradeId String
  trade Trade @relation(fields: [tradeId], references: [id])
  poster User @relation("TradeOfferUser", fields: [userId], references: [id])
  userId String
  message String?
  createdAt DateTime @default(now())
}